{"version":3,"sources":["component/navbar/navbar.module.scss","component/navbar/index.jsx","AuthRoute.jsx","App.js","serviceWorker.js","index.js","actions/authentication.js"],"names":["module","exports","withRouter","history","className","Styles","container","class","href","src","isLoggedIn","to","onClick","localStorage","removeItem","push","Component","component","rest","useEffect","render","props","Message","lazy","login","Home","WaitingComponent","fallback","App","exact","path","Boolean","window","location","hostname","match","Axios","defaults","baseURL","interceptors","request","use","config","token","getItem","_","isEmpty","headers","Authorization","console","log","error","Promise","reject","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,4B,+KC4BfC,4BAxBf,YAA8B,IAAZC,EAAW,EAAXA,QAKhB,OACE,+BAAKC,UAAWC,IAAOC,WACrB,oCACE,wBAAC,OAAD,CAAMC,MAAM,WAAWC,KAAK,KAC1B,+BAAKC,IAAI,iBADX,IAC6B,gDAG/B,oCACGC,eACC,gDACE,wBAAC,OAAD,CAAMC,GAAG,KAAT,0BACA,kCAAQC,QAfG,WACnBC,aAAaC,WAAW,SACxBX,EAAQY,KAAK,YAaL,gBCJGb,4BAZf,YAAgE,IAAhCc,EAA+B,EAA1CC,UAAsBd,EAAoB,EAApBA,QAAYe,EAAQ,uCAM7D,OALAC,qBAAU,WACHT,eACHP,EAAQY,KAAK,YAEd,CAACZ,IAEF,gDACE,wBAAC,QAAD,iBAAWe,EAAX,CAAiBE,OAAQ,SAACC,GAAD,OAAW,wBAACL,EAAcK,WCPnDC,G,MAAUC,gBAAK,kBAAM,uDACrBC,EAAQD,gBAAK,kBAAM,gCACnBE,EAAOF,gBAAK,kBAAM,6DAExB,SAASG,EAAiBV,GACxB,OAAO,SAACK,GAAD,OACL,wBAAC,WAAD,CACEM,SACE,+BAAKvB,UAAU,WACb,6DAIJ,wBAACY,EAAcK,KAuBNO,MAjBf,WACE,OACE,+BAAKxB,UAAU,OACb,wBAAC,EAAD,MACA,wBAAC,SAAD,KACE,wBAAC,QAAD,CAAOyB,OAAK,EAACC,KAAK,SAASb,UAAWS,EAAiBF,KACvD,wBAAC,QAAD,CACEK,OAAK,EACLC,KAAK,iFACLb,UAAWS,EAAiBJ,KAE9B,wBAAC,EAAD,CAAWO,OAAK,EAACC,KAAK,IAAIb,UAAWS,EAAiBD,Q,wCCxB1CM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAAMC,SAASC,QAAU,4BAEzBF,IAAMG,aAAaC,QAAQC,KACzB,SAAUC,GAER,IAAMC,EAAQ9B,aAAa+B,QAAQ,SAKnC,OAJKC,IAAEC,QAAQH,KACbD,EAAOK,QAAQC,cAAgBL,GAEjCM,QAAQC,IAAIR,GACLA,KAET,SAAUS,GAER,OAAOC,QAAQC,OAAOF,MAI1BG,UAASlC,OACP,wBAAC,UAAMmC,WAAP,KACE,wBAAC,IAAD,KACE,wBAAC,EAAD,QAGJC,SAASC,eAAe,SDiGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAb,GACLF,QAAQE,MAAMA,EAAMc,a,+BEzI5B,8CAEavD,EAAa,WACxB,OAAQmC,IAAEC,QAAQjC,aAAa+B,QAAQ,a","file":"static/js/main.9954aefd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"navbar_container__KgCiU\"};","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { isLoggedIn } from \"actions/authentication\";\r\nimport Styles from \"./navbar.module.scss\";\r\n\r\nfunction Navbar({ history }) {\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    history.push(\"/login\");\r\n  };\r\n  return (\r\n    <nav className={Styles.container}>\r\n      <span>\r\n        <Link class=\"wordmark\" href=\"/\">\r\n          <img src=\"/logo192.png\" /> <span>Bottle</span>\r\n        </Link>\r\n      </span>\r\n      <span>\r\n        {isLoggedIn() && (\r\n          <>\r\n            <Link to=\"/\">Send your own message.</Link>\r\n            <button onClick={handleLogout}>Logout</button>\r\n          </>\r\n        )}\r\n      </span>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { useEffect } from \"react\";\r\nimport { withRouter, Route } from \"react-router-dom\";\r\nimport { isLoggedIn } from \"actions/authentication\";\r\nimport Navbar from \"component/navbar\";\r\n\r\nfunction AuthRoute({ component: Component, history, ...rest }) {\r\n  useEffect(() => {\r\n    if (!isLoggedIn()) {\r\n      history.push(\"/login\");\r\n    }\r\n  }, [history]);\r\n  return (\r\n    <>\r\n      <Route {...rest} render={(props) => <Component {...props} />} />\r\n    </>\r\n  );\r\n}\r\nexport default withRouter(AuthRoute);\r\n","import React, { lazy, Suspense } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { toast, ToastContainer } from \"react-toastify\";\nimport AuthRoute from \"AuthRoute\";\nimport Navbar from \"component/navbar\";\nimport \"./App.scss\";\nconst Message = lazy(() => import(\"pages/message\"));\nconst login = lazy(() => import(\"pages/login\"));\nconst Home = lazy(() => import(\"pages/home\"));\n\nfunction WaitingComponent(Component) {\n  return (props) => (\n    <Suspense\n      fallback={\n        <div className=\"loading\">\n          <>Loading</>\n        </div>\n      }\n    >\n      <Component {...props} />\n    </Suspense>\n  );\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/login\" component={WaitingComponent(login)} />\n        <Route\n          exact\n          path=\"/:id([0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12})\"\n          component={WaitingComponent(Message)}\n        />\n        <AuthRoute exact path=\"/\" component={WaitingComponent(Home)} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport Axios from \"axios\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport _ from \"underscore\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nAxios.defaults.baseURL = \"http://localhost:3000/api\";\n// Add a request interceptor\nAxios.interceptors.request.use(\n  function (config) {\n    // Do something before request is sent\n    const token = localStorage.getItem(\"token\");\n    if (!_.isEmpty(token)) {\n      config.headers.Authorization = token;\n    }\n    console.log(config);\n    return config;\n  },\n  function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  }\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import _ from \"underscore\";\r\n\r\nexport const isLoggedIn = () => {\r\n  return !_.isEmpty(localStorage.getItem(\"token\"));\r\n};\r\n"],"sourceRoot":""}